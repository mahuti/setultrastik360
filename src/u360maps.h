/*
    setultrastik360 - rotates Ultimarc's UltraStick 360 joystick to any
    of the vendor supplied supported maps with physical restrictor support.
    Copyright (C) 2018 De Waegeneer Gijsbrecht

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

    contact: gijsbrecht.dewaegeneer@telenet.be
 */

#include <tuple>
#include <valarray>
#include <unordered_map>

#ifndef SETULTRASTIK360_U360MAPS_H
#define SETULTRASTIK360_U360MAPS_H

std::unordered_map<int, std::tuple<std::string, std::valarray<unsigned char>>> u360BehavioralMaps;

void populateU360BehavioralMaps() {
    std::valarray<unsigned char>
    map = { 0x50, 0x09, 0x10, 0x1E, 0x3A, 0x56, 0x72, 0x8E, 0xAA, 0xC6,
            0xE2, 0x08, 0x08, 0x08, 0x01, 0x01, 0x01, 0x04, 0x04, 0x04,
            0x08, 0x08, 0x08, 0x01, 0x01, 0x01, 0x04, 0x04, 0x04, 0x08, 0x08, 0x08,
            0x01, 0x01, 0x01, 0x04, 0x04, 0x04, 0x08, 0x08, 0x08, 0x01,
            0x01, 0x01, 0x04, 0x04, 0x04, 0x08, 0x08, 0x08, 0x01, 0x01,
            0x01, 0x04, 0x04, 0x04, 0x08, 0x08, 0x08, 0x01, 0x01, 0x01, 0x04, 0x04,
            0x04, 0x08, 0x08, 0x08, 0x01, 0x01, 0x01, 0x04, 0x04, 0x04,
            0x08, 0x08, 0x08, 0x01, 0x01, 0x01, 0x04, 0x04, 0x04, 0x08,
            0x08, 0x08, 0x01, 0x01, 0x01, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0xff};
    u360BehavioralMaps.emplace(1, std::make_tuple("2-Way, Left & Right", map));

    map = { 0x50, 0x09, 0x10, 0x1E, 0x3A, 0x56, 0x72, 0x8E, 0xAA, 0xC6,
            0xE2, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
            0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
            0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x01, 0x01, 0x01, 0x01,
            0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
            0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
            0x01, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
            0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
            0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0xff};
    u360BehavioralMaps.emplace(2, std::make_tuple("2-Way, Up & Down", map));

    map = { 0x50, 0x09, 0x10, 0x1E, 0x3A, 0x56, 0x72, 0x8E, 0xAA, 0xC6,
            0xE2, 0x09, 0x09, 0x09, 0x09, 0x0A, 0x03, 0x03, 0x03, 0x03,
            0x09, 0x09, 0x09, 0x09, 0x0A, 0x03, 0x03, 0x03, 0x03, 0x09, 0x09, 0x09,
            0x09, 0x01, 0x03, 0x03, 0x03, 0x03, 0x09, 0x09, 0x09, 0x01,
            0x01, 0x01, 0x03, 0x03, 0x03, 0x0A, 0x0A, 0x01, 0x01, 0x01,
            0x01, 0x01, 0x0A, 0x0A, 0x07, 0x07, 0x07, 0x01, 0x01, 0x01, 0x05, 0x05,
            0x05, 0x07, 0x07, 0x07, 0x07, 0x01, 0x05, 0x05, 0x05, 0x05,
            0x07, 0x07, 0x07, 0x07, 0x0A, 0x05, 0x05, 0x05, 0x05, 0x07,
            0x07, 0x07, 0x07, 0x0A, 0x05, 0x05, 0x05, 0x05, 0x00, 0x00, 0x00, 0xff};
    u360BehavioralMaps.emplace(3, std::make_tuple("4-Way, Diagonals Only", map));

    map = { 0x50, 0x09, 0x10, 0x1E, 0x3A, 0x56, 0x72, 0x8E, 0xAA, 0xC6,
            0xE2, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
            0x08, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x04, 0x08, 0x08, 0x02,
            0x02, 0x02, 0x02, 0x02, 0x04, 0x04, 0x08, 0x08, 0x08, 0x01,
            0x01, 0x01, 0x04, 0x04, 0x04, 0x08, 0x08, 0x08, 0x01, 0x01,
            0x01, 0x04, 0x04, 0x04, 0x08, 0x08, 0x08, 0x01, 0x01, 0x01, 0x04, 0x04,
            0x04, 0x08, 0x08, 0x06, 0x06, 0x06, 0x06, 0x06, 0x04, 0x04,
            0x08, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x04, 0x06,
            0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0xff};
    u360BehavioralMaps.emplace(4, std::make_tuple("4-Way, No Sticky (UD Bias)",map));

    map = { 0x50, 0x09, 0x10, 0x1E, 0x3A, 0x56, 0x72, 0x8E, 0xAA, 0xC6,
            0xE2, 0x0A, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0A,
            0x08, 0x0A, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0A, 0x04, 0x08, 0x08, 0x0A,
            0x02, 0x02, 0x02, 0x0A, 0x04, 0x04, 0x08, 0x08, 0x08, 0x01,
            0x01, 0x01, 0x04, 0x04, 0x04, 0x08, 0x08, 0x08, 0x01, 0x01,
            0x01, 0x04, 0x04, 0x04, 0x08, 0x08, 0x08, 0x01, 0x01, 0x01, 0x04, 0x04,
            0x04, 0x08, 0x08, 0x0A, 0x06, 0x06, 0x06, 0x0A, 0x04, 0x04,
            0x08, 0x0A, 0x06, 0x06, 0x06, 0x06, 0x06, 0x0A, 0x04, 0x0A,
            0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x0A, 0x00, 0x00, 0x00, 0xff};
    u360BehavioralMaps.emplace(5, std::make_tuple("4-way",map));

    map = { 0x50, 0x09, 0x10, 0x1E, 0x3A, 0x56, 0x72, 0x8E, 0xAA, 0xC6,
            0xE2, 0x09, 0x09, 0x0A, 0x02, 0x02, 0x02, 0x0A, 0x03, 0x03,
            0x09, 0x09, 0x09, 0x02, 0x02, 0x02, 0x03, 0x03, 0x03, 0x0A, 0x09, 0x09,
            0x0A, 0x02, 0x0A, 0x03, 0x03, 0x0A, 0x08, 0x08, 0x0A, 0x09,
            0x01, 0x03, 0x0A, 0x04, 0x04, 0x08, 0x08, 0x08, 0x01, 0x01,
            0x01, 0x04, 0x04, 0x04, 0x08, 0x08, 0x0A, 0x07, 0x01, 0x05, 0x0A, 0x04,
            0x04, 0x0A, 0x07, 0x07, 0x0A, 0x06, 0x0A, 0x05, 0x05, 0x0A,
            0x07, 0x07, 0x07, 0x06, 0x06, 0x06, 0x05, 0x05, 0x05, 0x07,
            0x07, 0x0A, 0x06, 0x06, 0x06, 0x0A, 0x05, 0x05, 0x00, 0x00, 0x00, 0xff};
    u360BehavioralMaps.emplace(6, std::make_tuple("8-Way Easy Diagonals",map));

    map = { 0x50, 0x09, 0x10, 0x1E, 0x3A, 0x56, 0x72, 0x8E, 0xAA, 0xC6,
            0xE2, 0x09, 0x09, 0x09, 0x02, 0x02, 0x02, 0x03, 0x03, 0x03,
            0x09, 0x09, 0x09, 0x02, 0x02, 0x02, 0x03, 0x03, 0x03, 0x09, 0x09, 0x09,
            0x02, 0x02, 0x02, 0x03, 0x03, 0x03, 0x08, 0x08, 0x08, 0x01,
            0x01, 0x01, 0x04, 0x04, 0x04, 0x08, 0x08, 0x08, 0x01, 0x01,
            0x01, 0x04, 0x04, 0x04, 0x08, 0x08, 0x08, 0x01, 0x01, 0x01, 0x04, 0x04,
            0x04, 0x07, 0x07, 0x07, 0x06, 0x06, 0x06, 0x05, 0x05, 0x05,
            0x07, 0x07, 0x07, 0x06, 0x06, 0x06, 0x05, 0x05, 0x05, 0x07,
            0x07, 0x07, 0x06, 0x06, 0x06, 0x05, 0x05, 0x05, 0x00, 0x00, 0x00, 0xff};
    u360BehavioralMaps.emplace(7, std::make_tuple("8-way",map));

    map = { 0x50, 0x09, 0x10, 0x1E, 0x3A, 0x56, 0x72, 0x8E, 0xAA, 0xC6,
            0xE2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff};
    u360BehavioralMaps.emplace(8, std::make_tuple("Analog",map));

    map = { 0x50, 0x09, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00,
            0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
            0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
            0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
            0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
            0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
            0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
            0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0xff};
    u360BehavioralMaps.emplace(9, std::make_tuple("Mouse Pointer",map));
}

#endif //SETULTRASTIK360_U360MAPS_H
